#!/usr/bin/env bash

if [ -z "$TMPDIR" ]; then
    TMPDIR="/tmp"
fi

CACHEDIR="$TMPDIR/npmi"

VERSION="2.1.0"
VERBOSE=0
FORCE=0
CACHE_EXISTING=0


usage() {
    echo -e "NPMI v${VERSION} - a caching 'npm install'\n"
    echo "Usage: $0 [-hcfv]"
    echo "-h    Display this help"
    echo "-c    Use specified cache dir: Default \$TMPDIR/npmi"
    echo "-e    Cache existing node_modules AKA 'Oops I forgot to npmi' mode"
    echo "-f    Force install from NPM and update cache"
    echo "-v    Verbose output"
}

while getopts 'hc:efv' OPTION; do
    case $OPTION in
        h)
            usage
            exit 1
            ;;
        c)
            if [ ! -d "$OPTARG" ]; then
                echo "ERROR: Specified cache dir $OPTARG does not exist"
                exit 1
            fi
            CACHEDIR="$OPTARG"
            ;;
        e)
            CACHE_EXISTING=1
            ;;
        f)
            FORCE=1
            ;;
        v)
            VERBOSE=1
            ;;
    esac
done

vecho() {
    test $VERBOSE -eq 1 && echo $*
    return 0
}

sanitycheck() {
    if [ ! -d "$CACHEDIR" ]; then
        if ! mkdir "$CACHEDIR"; then
            echo "ERROR: Can't create cache directory $CACHEDIR"
            exit 1
        fi
    fi

    BINS="cut tar node npm"
    for bin in $BINS; do
        if ! which "$bin" > /dev/null 2>&1 ; then
            echo "ERROR: Binary $bin not found"
            exit 1
        fi
    done

    if which "md5sum" > /dev/null 2>&1 ; then
        MD5SUM="md5sum"
    elif which "gmd5sum" > /dev/null 2>&1 ; then
        MD5SUM="gmd5sum"
    elif which "md5" > /dev/null 2>&1 ; then
        MD5SUM="md5 -q"
    else
        echo "ERROR: md5sum or md5 binary not found"
        exit 1
    fi
}

get_hash() {
    local file="$1"
    if [ -f "$file" ]; then
        HASH=$($MD5SUM $file | cut -c1-32)
    else
        return 1
    fi
}

determine_hash() {
    HASH_SOURCES='npm-shrinkwrap.json package.json'

    for HASH_SOURCE in $HASH_SOURCES; do
        get_hash "$HASH_SOURCE" && break
    done
}

remove_modules() {
    if [ -d "node_modules" ]; then
        rm -rf node_modules
    fi
}

install_from_cache() {
    local cachefile="$1"

    if [ -f "$cachefile" ]; then
        tar xfz "$cachefile"
        if [ $? -eq 0 ]; then
            return 0
        else
            return 2
        fi
    else
        return 1
    fi
}

install_from_npm() {
    npm install --loglevel error 2>&1 >/dev/null
    return $?
}

store_to_cache() {
    local cachefile="$1"

    tar cfz "$cachefile" node_modules
    if [ $? -ne 0 ]; then
        rm -f "$cachefile"
        return 1
    fi
}


# Make sure everything is good to go
sanitycheck

PREFIX=$(node -p 'process.version + "-" + process.platform + "-" + process.arch')

if [ $? -ne 0 ]; then
    echo "ERROR: Cannot determine node platform prefix"
    exit 2
fi

# Sets HASH, HASH_SOURCE
determine_hash
if [ -z "$HASH" ]; then
    echo "ERROR: Can't find npm-shrinkwrap.json/package.json"
    exit 1
fi

CACHEFILE="$CACHEDIR/$PREFIX-$HASH.tgz"
vecho "- HASH ${HASH} determined from ${HASH_SOURCE} (${PREFIX})"

if [ $CACHE_EXISTING -eq 1 ]; then
    if store_to_cache "$CACHEFILE"; then
        vecho "- Modules cached successfully"
        exit 0
    else
        echo "ERROR: tar command failed..."
        exit 2
    fi
fi

vecho "- Cleaning node_modules..."
if ! remove_modules; then
    echo "ERROR: Cannot remove node_modules"
    exit 2
fi

if [ $FORCE -eq 0 ]; then
    vecho "- Attempt to install from cache"
    install_from_cache "$CACHEFILE"
    case $? in
        0)
            vecho "- Modules installed successfully"
            exit 0
            ;;
        1)
            vecho "- Modules not found in cache"
            ;;
        *)
            echo "ERROR: Install from cache failed"
            exit 2
            ;;
    esac
    vecho "- Installing modules from NPM"
else
    vecho "- FORCE: Installing modules from NPM"
fi

if ! install_from_npm; then
    echo "ERROR: NPM install failed"
    exit 2
fi

if [ $FORCE -eq 1 ]; then
    if [ -f "$CACHEFILE" ]; then
        vecho "- FORCE: Remove existing cache file"
        if ! rm "$CACHEFILE"; then
            echo "ERROR: Could not remove cache file"
            exit 2
        fi
    fi
fi

if store_to_cache "$CACHEFILE"; then
    vecho "- Modules cached successfully"
else
    echo "ERROR: tar command failed..."
    exit 2
fi
